C51 COMPILER V9.53.0.0   EFM8BB1_FLASHPRIMITIVES                                           04/06/2017 12:38:20 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE EFM8BB1_FLASHPRIMITIVES
OBJECT MODULE PLACED IN .\src\EFM8BB1_FlashPrimitives.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Adminis
                    -trator\SimplicityStudio\v3_workspace\aidik_4ch\src\EFM8BB1_FlashPrimitives.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WA
                    -RNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Administrator
                    -\SimplicityStudio\v3_workspace\aidik_4ch\inc;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/shared/
                    -si8051Base;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8BB1;C:/SiliconLabs/SimplicityStudio/v
                    -3/developer/sdks/si8051/v3//Device/EFM8BB1/inc) PRINT(.\src\EFM8BB1_FlashPrimitives.lst) COND PAGEWIDTH(120) PAGELENGTH(
                    -65) OBJECT(.\src\EFM8BB1_FlashPrimitives.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // EFM8BB1_FlashPrimitives.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // This program contains several useful utilities for writing and updating
  10          // flash memory.
  11          //
  12          // Target:         EFM8BB1
  13          // Tool chain:     Keil C51
  14          //
  15          // Release 1.0
  16          //    -Initial Revision (ST)
  17          //    -10 OCT 2014
  18          //
  19          
  20          //-----------------------------------------------------------------------------
  21          // Includes
  22          //-----------------------------------------------------------------------------
  23          #include <SI_EFM8BB1_Register_Enums.h>
  24          #include "EFM8BB1_FlashPrimitives.h"
  25          
  26          //-----------------------------------------------------------------------------
  27          // Function Prototypes
  28          //-----------------------------------------------------------------------------
  29          void          FLASH_ByteWrite (FLADDR addr, char byte);
  30          uint8_t       FLASH_ByteRead  (FLADDR addr);
  31          void          FLASH_PageErase (FLADDR addr);
  32          
  33          //-----------------------------------------------------------------------------
  34          // FLASH_ByteWrite
  35          //-----------------------------------------------------------------------------
  36          //
  37          // Return Value : None
  38          // Parameters   :
  39          //   1) FLADDR addr - address of the byte to write to
  40          //                    valid range is from 0x0000 to 0x1FFF for 8 kB devices
  41          //                    valid range is from 0x0000 to 0x0FFF for 4 kB devices
  42          //                    valid range is from 0x0000 to 0x07FF for 2 kB devices
  43          //   2) char byte - byte to write to flash.
  44          //
  45          // This routine writes <byte> to the linear flash address <addr>.
  46          //
  47          //-----------------------------------------------------------------------------
  48          void FLASH_ByteWrite (FLADDR addr, uint8_t byte)
  49          {
  50   1         bit EA_SAVE = IE_EA;                // Preserve IE_EA
C51 COMPILER V9.53.0.0   EFM8BB1_FLASHPRIMITIVES                                           04/06/2017 12:38:20 PAGE 2   

  51   1         uint8_t xdata * data pwrite;           // Flash write pointer
  52   1      
  53   1         IE_EA = 0;                          // Disable interrupts
  54   1      
  55   1         VDM0CN = 0x80;                      // Enable VDD monitor
  56   1      
  57   1         RSTSRC = 0x02;                      // Enable VDD monitor as a reset source
  58   1      
  59   1         pwrite = (uint8_t xdata *) addr;
  60   1      
  61   1         FLKEY  = 0xA5;                      // Key Sequence 1
  62   1         FLKEY  = 0xF1;                      // Key Sequence 2
  63   1         PSCTL |= 0x01;                      // PSWE = 1 which enables writes
  64   1      
  65   1         VDM0CN = 0x80;                      // Enable VDD monitor
  66   1      
  67   1         RSTSRC = 0x02;                      // Enable VDD monitor as a reset source
  68   1         *pwrite = byte;                     // Write the byte
  69   1      
  70   1         PSCTL &= ~0x01;                     // PSWE = 0 which disable writes
  71   1      
  72   1         IE_EA = EA_SAVE;                    // Restore interrupts
  73   1      }
  74          #if 0
              void flashWrite4Bytes (FLADDR addr, uint32_t *data_32,uint8_t len)
              {
              #if 0
                      uint8_t i = 0;
                      uint8_t byte = 0;
                      for(i = 0; i < 4; i++)
                      {
                              byte = (uint8_t)(data_32 >> (i * 8));
                              FLASH_ByteWrite(addr + i,byte);
                      }
              #endif
                      uint8_t i = 0;
                      uint8_t j = 0;
                      uint8_t byte = 0;
                      for(i = 0; i < len; i++)
                      {
                              for(j = 0; j < 4; j++)
                              {
                                      byte = (uint8_t)(data_32[i] >> (j * 8));
                                      FLASH_ByteWrite(addr + j + i * 4,byte);
                              }
                      }
              }
              #endif
  99          //-----------------------------------------------------------------------------
 100          // FLASH_ByteRead
 101          //-----------------------------------------------------------------------------
 102          //
 103          // Return Value :
 104          //      uint8_t - byte read from flash
 105          // Parameters   :
 106          //   1) FLADDR addr - address of the byte to read to
 107          //                    valid range is from 0x0000 to 0x1FFF for 8 kB devices
 108          //                    valid range is from 0x0000 to 0x0FFF for 4 kB devices
 109          //                    valid range is from 0x0000 to 0x07FF for 2 kB devices
 110          //
 111          // This routine reads a <byte> from the linear flash address <addr>.
 112          //
 113          //-----------------------------------------------------------------------------
C51 COMPILER V9.53.0.0   EFM8BB1_FLASHPRIMITIVES                                           04/06/2017 12:38:20 PAGE 3   

 114          uint8_t FLASH_ByteRead (FLADDR addr)
 115          {
 116   1         bit EA_SAVE = IE_EA;                // Preserve IE_EA
 117   1         uint8_t code * data pread;          // Flash read pointer
 118   1         uint8_t byte;
 119   1      
 120   1         IE_EA = 0;                          // Disable interrupts
 121   1      
 122   1         pread = (uint8_t code *) addr;
 123   1      
 124   1         byte = *pread;                      // Read the byte
 125   1      
 126   1         IE_EA = EA_SAVE;                    // Restore interrupts
 127   1      
 128   1         return byte;
 129   1      }
 130          #if 0
              void flashRead32Byte(FLADDR addr,uint32_t *data_32,uint8_t len)
              {
              #if 0
                      int8_t i = 4;
                      uint32_t data_32 = 0;
                      uint8_t byte = 0;
                      for(i = 3; i >= 0; i--)
                      {
                              byte = FLASH_ByteRead(addr + i);
                              data_32 = (data_32  << 8) | byte;
                      }
                      return data_32;
              #endif
                      uint8_t i = 0;
                      uint8_t j = 4;
                      uint32_t temp = 0;
                      uint8_t byte = 0;
                      for(i = 0; i < len; i++)
                      {
                              temp = 0;
                              for(j = 3; j >= i * 4; j--)
                              {
                                      byte = FLASH_ByteRead(addr +  j + (i * 4));
                                      temp = (temp  << 8) | byte;
                              }
                              data_32[i] = temp;
                      }
              }
              #endif
 160          //-----------------------------------------------------------------------------
 161          // FLASH_PageErase
 162          //-----------------------------------------------------------------------------
 163          //
 164          // Return Value : None
 165          // Parameters   :
 166          //   1) FLADDR addr - address of any byte in the page to erase
 167          //                    valid range is from 0x0000 to 0x1FFF for 8 kB devices
 168          //                    valid range is from 0x0000 to 0x0FFF for 4 kB devices
 169          //                    valid range is from 0x0000 to 0x07FF for 2 kB devices
 170          //
 171          // This routine erases the flash page containing the linear flash address
 172          // <addr>.  Note that the page of flash page containing the Lock Byte cannot be
 173          // erased if the Lock Byte is set.
 174          //
 175          //-----------------------------------------------------------------------------
 176          void FLASH_PageErase (FLADDR addr)
C51 COMPILER V9.53.0.0   EFM8BB1_FLASHPRIMITIVES                                           04/06/2017 12:38:20 PAGE 4   

 177          {
 178   1         bit EA_SAVE = IE_EA;                // Preserve IE_EA
 179   1         uint8_t xdata * data pwrite;           // Flash write pointer
 180   1      
 181   1         IE_EA = 0;                          // Disable interrupts
 182   1      
 183   1         VDM0CN = 0x80;                      // Enable VDD monitor
 184   1      
 185   1         RSTSRC = 0x02;                      // Enable VDD monitor as a reset source
 186   1      
 187   1         pwrite = (uint8_t xdata *) addr;
 188   1      
 189   1         FLKEY  = 0xA5;                      // Key Sequence 1
 190   1         FLKEY  = 0xF1;                      // Key Sequence 2
 191   1         PSCTL |= 0x03;                      // PSWE = 1; PSEE = 1
 192   1      
 193   1         VDM0CN = 0x80;                      // Enable VDD monitor
 194   1      
 195   1         RSTSRC = 0x02;                      // Enable VDD monitor as a reset source
 196   1         *pwrite = 0;                        // Initiate page erase
 197   1      
 198   1         PSCTL &= ~0x03;                     // PSWE = 0; PSEE = 0
 199   1      
 200   1         IE_EA = EA_SAVE;                    // Restore interrupts
 201   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    100    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       3
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
