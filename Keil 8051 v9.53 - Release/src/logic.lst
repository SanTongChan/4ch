C51 COMPILER V9.53.0.0   LOGIC                                                             04/06/2017 13:17:42 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE LOGIC
OBJECT MODULE PLACED IN .\src\logic.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Adminis
                    -trator\SimplicityStudio\v3_workspace\aidik_4ch\src\logic.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOA
                    -TFUZZY(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Administrator\SimplicityStudio
                    -\v3_workspace\aidik_4ch\inc;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/shared/si8051Base;C:/Sil
                    -iconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8BB1;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/
                    -si8051/v3//Device/EFM8BB1/inc) REGFILE(aidik_4ch.ORC) PRINT(.\src\logic.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.
                    -\src\logic.OBJ)

line level    source

   1          /*
   2           * logic.c
   3           *
   4           *  Created on: 2017-4-4
   5           *      Author: Administrator
   6           */
   7          
   8          #include "logic.h"
   9          #include "key.h"
  10          #include "led.h"
  11          #include "stdio.h"
  12          #include "wireless.h"
  13          DeviceDef device_def = {0};
  14          //uint8_t work_mode_params = 0;
  15          uint16_t time_level = 50;
  16          uint32_t ad_val = 0 ;
  17          uint16_t code table[20] = {3100,2700,2300,1900,1500,1200,900,600,300,0,350,300,250,200,150,130,110,90,70,5
             -0};
  18          
  19          sbit RELAY1 = P1^4;
  20          sbit RELAY2 = P1^3;
  21          sbit RELAY3 = P0^7;
  22          sbit RELAY4 = P1^1;
  23          
  24          static void deviceStatusInit(void)
  25          {
  26   1              loadParamtoFlash();
  27   1              getParams13();
  28   1      }
  29          void deviceInit(void)
  30          {
  31   1              deviceStatusInit();
  32   1              keyInit();
  33   1              ledsOff();
  34   1      }
  35          
  36          void adScan(void)
  37          {
  38   1              static uint32_t accumulator = 0;
  39   1              static uint16_t measure_cnt = 2048;
  40   1              static bool switch_ad_flag = false;
  41   1              uint32_t result = 0;
  42   1              uint8_t i = 0;
  43   1              ADC0CN0_ADINT = 0;
  44   1              accumulator += ADC0;
  45   1              measure_cnt--;
  46   1              if(measure_cnt == 0 && switch_ad_flag == false)
  47   1              {
  48   2                      measure_cnt = 50;
  49   2                      result = accumulator / 2048;
C51 COMPILER V9.53.0.0   LOGIC                                                             04/06/2017 13:17:42 PAGE 2   

  50   2                      accumulator = 0;
  51   2                      result =  (result * 3300) / 1023;
  52   2                      switch_ad_flag = true;
  53   2                      ADC0MX = ADC0MX_ADC0MX__ADC0P6;
  54   2                      for(i = 0; i < 10; i++)
  55   2                      {
  56   3                              if(result >= table[i])
  57   3                              {
  58   4                                      time_level = table[i + 10];
  59   4                                      break;
  60   4                              }
  61   3                      }
  62   2              }
  63   1              else if(measure_cnt == 0 && switch_ad_flag == true)
  64   1              {
  65   2                      measure_cnt = 50;
  66   2                      result = accumulator / 50;
  67   2                      accumulator = 0;
  68   2                      ad_val =  (result * 3300) / 1023;
  69   2              }
  70   1      }
  71          
  72          void setKeyPin(uint8_t index,bool level)
  73          {
  74   1              if(0 == index)
  75   1              {
  76   2                      KEY1 = level;
  77   2              }
  78   1              else if(1 == index)
  79   1              {
  80   2                      KEY2 = level;
  81   2              }
  82   1              else if(2 == index)
  83   1              {
  84   2                      KEY3 = level;
  85   2              }
  86   1              else if(3 == index)
  87   1              {
  88   2                      KEY4 = level;
  89   2              }
  90   1      }
  91          static uint8_t getReadRelayStatus(uint8_t index)
  92          {
  93   1              if(index == 0)
  94   1              {
  95   2                      return RELAY1;
  96   2              }
  97   1              else if(index == 1)
  98   1              {
  99   2                      return RELAY2;
 100   2              }
 101   1              else if(index == 2)
 102   1              {
 103   2                      return RELAY3;
 104   2              }
 105   1              else
 106   1              {
 107   2                      return RELAY4;
 108   2              }
 109   1      }
 110          static void dealJogging(void)
 111          {
 112   1          uint8_t i = 0;
C51 COMPILER V9.53.0.0   LOGIC                                                             04/06/2017 13:17:42 PAGE 3   

 113   1          for(i = 0; i < 4; i++)
 114   1          {
 115   2              device_def.device_channel_def[i].time_cnt++;
 116   2              if(device_def.device_channel_def[i].device_channel_mode == DEVICE_CHANNEL_JOGGING)
 117   2              {
 118   3                  if(getReadRelayStatus(i) == 1 && device_def.device_channel_def[i].jogging_flag == false)
 119   3                  {
 120   4                      device_def.device_channel_def[i].time_cnt = 0;
 121   4                      device_def.device_channel_def[i].jogging_flag = true;
 122   4                  }
 123   3                  else if(device_def.device_channel_def[i].jogging_flag == true
 124   3                      && device_def.device_channel_def[i].time_cnt == time_level - 5
 125   3                      && getReadRelayStatus(i) == 1)
 126   3                  {
 127   4                      setKeyPin(i,false);
 128   4                  }
 129   3                  else if(device_def.device_channel_def[i].jogging_flag == true
 130   3                      && device_def.device_channel_def[i].time_cnt == time_level
 131   3                      && getReadRelayStatus(i) == 1)
 132   3                  {
 133   4                      setKeyPin(i,true);
 134   4                      device_def.device_channel_def[i].jogging_flag = false;
 135   4                  }
 136   3                  else if(getReadRelayStatus(i) == 0 && device_def.device_channel_def[i].jogging_flag == true)
 137   3                  {
 138   4                      device_def.device_channel_def[i].jogging_flag = false;
 139   4                  }
 140   3              }
 141   2          }
 142   1      }
 143          static void setChannelStatusInLock(uint8_t index,uint8_t lock_channel)
 144          {
 145   1          if(getReadRelayStatus(index) == 1 && lock_channel != (index + 1) && device_def.device_channel_def[inde
             -x].time_cnt <=5)
 146   1          {
 147   2              setKeyPin(index,false);
 148   2          }
 149   1          else if(getReadRelayStatus(index) == 1 && lock_channel != (index + 1) && device_def.device_channel_def
             -[index].time_cnt > 5)
 150   1          {
 151   2              setKeyPin(index,true);
 152   2              device_def.device_channel_def[index].time_cnt = 0;
 153   2          }
 154   1      }
 155          static void dealLock(void)
 156          {
 157   1          static uint8_t lock_channel = 0;
 158   1          static uint8_t last_lock_channel = 0;
 159   1          static uint8_t xdata last_relay_val[4] = {0};
 160   1          uint8_t xdata relay_val[4] = {0};
 161   1          uint8_t i = 0;
 162   1          relay_val[0] = RELAY1;
 163   1          relay_val[1] = RELAY2;
 164   1          relay_val[2] = RELAY3;
 165   1          relay_val[3] = RELAY4;
 166   1          for(i = 0; i < 4; i++)
 167   1          {
 168   2              if(relay_val[i] != last_relay_val[i] && relay_val[i] == 1)
 169   2              {
 170   3                  lock_channel = i + 1;
 171   3      
 172   3              }
 173   2              last_relay_val[i] = relay_val[i];
C51 COMPILER V9.53.0.0   LOGIC                                                             04/06/2017 13:17:42 PAGE 4   

 174   2              device_def.device_channel_def[i].time_cnt++;
 175   2          }
 176   1      
 177   1          if(last_lock_channel != lock_channel)
 178   1          {
 179   2              for(i = 0; i < 4; i++)
 180   2              {
 181   3                  device_def.device_channel_def[i].time_cnt = 0;
 182   3              }
 183   2              last_lock_channel = lock_channel;
 184   2          }
 185   1          for(i = 0; i < 4; i++)
 186   1          {
 187   2              setChannelStatusInLock(i,lock_channel);
 188   2          }
 189   1      }
 190          void dealNormalMode(void)
 191          {
 192   1              if(device_def.device_normal_state == DEVICE_LOCK)
 193   1              {
 194   2                      dealLock();
 195   2              }
 196   1              else
 197   1              {
 198   2                      dealJogging();
 199   2              }
 200   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    765    ----
   CONSTANT SIZE    =     44    ----
   XDATA SIZE       =      4       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     64       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
