C51 COMPILER V9.53.0.0   LED_DRIVER                                                        04/04/2017 16:58:54 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE LED_DRIVER
OBJECT MODULE PLACED IN .\src\driver\led_driver.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Adminis
                    -trator\SimplicityStudio\v3_workspace\aidik_4ch\src\driver\led_driver.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGL
                    -EVEL(2) FLOATFUZZY(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Administrator\Simp
                    -licityStudio\v3_workspace\aidik_4ch\inc;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/shared/si805
                    -1Base;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8BB1;C:/SiliconLabs/SimplicityStudio/v3/dev
                    -eloper/sdks/si8051/v3//Device/EFM8BB1/inc) REGFILE(aidik_4ch.ORC) PRINT(.\src\driver\led_driver.lst) COND PAGEWIDTH(120)
                    - PAGELENGTH(65) OBJECT(.\src\driver\led_driver.OBJ)

line level    source

   1          /*
   2           * led_driver.c
   3           *
   4           *  Created on: 2017-4-4
   5           *      Author: Administrator
   6           */
   7          
   8          #include "led_driver.h"
   9          
  10          enum
  11          {
  12              LED_OFF = 0X00,
  13              LED_ON  = 0X01,
  14              LED_FLASH = 0X82,
  15          };
  16          typedef struct
  17          {
  18                  ledIsOnCb _led_is_on;
  19              ledTogProcCb _led_tog_proc_cb;
  20          }LedSingle;
  21          
  22          typedef struct
  23          {
  24              LedSingle _led_single[LED_MAX_NUM];
  25              uint8_t num;
  26          }LedsDev;
  27          typedef struct
  28          {
  29              uint8_t speed;
  30              uint8_t speed_cnt;
  31              uint8_t speed_on;
  32              uint8_t speed_off;
  33              uint8_t flag;
  34              uint8_t blink_cnt;
  35              uint8_t blink_cnt_on;
  36          }_LedCtl;
  37          
  38          typedef struct
  39          {
  40              _LedCtl key_ctl[LED_MAX_NUM];
  41          }LedsCtl;
  42          
  43          LedsDev leds_dev = {0};
  44          LedsCtl leds_ctl = {0};
  45          
  46          bool ledRegisterSingle(ledIsOnCb _led_is_on,ledTogProcCb _led_tog_proc_cb)
  47          {
  48   1          if(leds_dev.num >= LED_MAX_NUM || NULL == _led_is_on || NULL == _led_tog_proc_cb)
  49   1          {
  50   2              return false;
C51 COMPILER V9.53.0.0   LED_DRIVER                                                        04/04/2017 16:58:54 PAGE 2   

  51   2          }
  52   1          leds_dev._led_single[leds_dev.num]._led_is_on = _led_is_on;
  53   1          leds_dev._led_single[leds_dev.num]._led_tog_proc_cb = _led_tog_proc_cb;
  54   1          leds_dev.num++;
  55   1          return true;
  56   1      }
  57          
  58          void ledScan(void)
  59          {
  60   1          uint8_t i = 0;
  61   1          for(i = 0; i < leds_dev.num; i++)
  62   1          {
  63   2              if((leds_ctl.key_ctl[i].flag & 0x80)
  64   2                  && NULL != leds_dev._led_single[i]._led_is_on
  65   2                  && NULL != leds_dev._led_single[i]._led_tog_proc_cb
  66   2                  && (leds_ctl.key_ctl[i].blink_cnt_on < leds_ctl.key_ctl[i].blink_cnt
  67   2                      || leds_ctl.key_ctl[i].blink_cnt == 0))
  68   2              {
  69   3                  leds_ctl.key_ctl[i].speed_cnt++;
  70   3                  if(leds_ctl.key_ctl[i].speed_cnt >= leds_ctl.key_ctl[i].speed)
  71   3                  {
  72   4                      if(leds_dev._led_single[i]._led_is_on())
  73   4                      {
  74   5                          leds_ctl.key_ctl[i].blink_cnt_on++;
  75   5                          leds_ctl.key_ctl[i].speed = leds_ctl.key_ctl[i].speed_off;
  76   5                      }
  77   4                      else
  78   4                      {
  79   5                          leds_ctl.key_ctl[i].speed = leds_ctl.key_ctl[i].speed_on;
  80   5                      }
  81   4                      leds_ctl.key_ctl[i].speed_cnt = 0;
  82   4                      leds_dev._led_single[i]._led_tog_proc_cb();
  83   4                  }
  84   3              }
  85   2          }
  86   1      }
  87          
  88          void setLedOn(uint8_t index)
  89          {
  90   1          if(index >= LED_MAX_NUM)
  91   1          {
  92   2              return;
  93   2          }
  94   1          leds_ctl.key_ctl[index].flag = LED_ON;
  95   1      }
  96          
  97          void setLedOff(uint8_t index)
  98          {
  99   1          if(index >= LED_MAX_NUM)
 100   1          {
 101   2              return;
 102   2          }
 103   1          leds_ctl.key_ctl[index].flag = LED_OFF;
 104   1      }
 105          void setLedBlink(uint8_t index,uint8_t speed_off,uint8_t speed_on,uint8_t blink_cnt)
 106          {
 107   1          leds_ctl.key_ctl[index].speed = 0;
 108   1          leds_ctl.key_ctl[index].blink_cnt_on = 0;
 109   1          leds_ctl.key_ctl[index].blink_cnt = blink_cnt;
 110   1          leds_ctl.key_ctl[index].speed_off = speed_off;
 111   1          leds_ctl.key_ctl[index].speed_on = speed_on;
 112   1          leds_ctl.key_ctl[index].flag = LED_FLASH;
 113   1      }
C51 COMPILER V9.53.0.0   LED_DRIVER                                                        04/04/2017 16:58:54 PAGE 3   

 114          bool blinkIsOk(uint8_t index)
 115          {
 116   1          if(leds_ctl.key_ctl[index].blink_cnt_on == leds_ctl.key_ctl[index].blink_cnt
 117   1              || leds_ctl.key_ctl[index].blink_cnt == 0)
 118   1          {
 119   2              return true;
 120   2          }
 121   1          return false;
 122   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    369    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
